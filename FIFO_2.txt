----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    11:53:05 06/30/2022 
-- Design Name: 
-- Module Name:    FIFO_Memory_Test 
-- Project Name:   Keypad_interface
-- Target Devices: 
-- Tool versions: 
-- Description:    Testbench for FIFO memory
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity FIFO_Memory_Test is
end FIFO_Memory_Test;

architecture Behavioral of FIFO_Memory_Test is

    -- Component Declaration for the Unit Under Test (UUT)
    component STD_FIFO
        port(
            CLK      : in  std_logic;
            RST      : in  std_logic;
            WriteEn  : in  std_logic;
            DataIn   : in  std_logic_vector(3 downto 0);
            ReadEn   : in  std_logic;
            DataOut  : out std_logic_vector(3 downto 0);
            Empty    : out std_logic;
            Full     : out std_logic
        );
    end component;

    -- Inputs
    signal CLK      : std_logic := '0';
    signal RST      : std_logic := '0';
    signal WriteEn  : std_logic := '0';
    signal DataIn   : std_logic_vector(3 downto 0) := (others => '0');
    signal ReadEn   : std_logic := '0';

    -- Outputs
    signal DataOut  : std_logic_vector(3 downto 0);
    signal Empty    : std_logic;
    signal Full     : std_logic;

    -- Clock period definitions
    constant CLK_period : time := 10 ns;

begin

    -- Instantiate the Unit Under Test (UUT)
    uut: STD_FIFO
        port map (
            CLK      => CLK,
            RST      => RST,
            WriteEn  => WriteEn,
            DataIn   => DataIn,
            ReadEn   => ReadEn,
            DataOut  => DataOut,
            Empty    => Empty,
            Full     => Full
        );

    -- Clock generation
    process
    begin
        CLK <= '0';
        wait for CLK_period / 2;
        CLK <= '1';
        wait for CLK_period / 2;
    end process;

    -- Reset process
    process
    begin
        RST <= '1';
        wait for CLK_period * 3;
        RST <= '0';
        wait;
    end process;

    -- Write process
    wr_proc : process
        variable counter : std_logic_vector(3 downto 0) := (others => '0');
    begin
        wait for CLK_period * 5;
        for i in 1 to 16 loop  -- Adjust loop limit as needed
            counter := counter + 1;
            DataIn <= counter;
            WriteEn <= '1';
            wait for CLK_period;
            WriteEn <= '0';
            wait for CLK_period;
        end loop;
        wait;
    end process;

    -- Read process
    rd_proc : process
    begin
        wait for CLK_period * 20;  -- Allow some writes to happen
        for i in 1 to 16 loop  -- Adjust loop limit as needed
            ReadEn <= '1';
            wait for CLK_period;
            ReadEn <= '0';
            wait for CLK_period;
        end loop;
        wait;
    end process;

end Behavioral;
